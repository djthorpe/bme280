
syntax = "proto3";
package mihome;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

/////////////////////////////////////////////////////////////////////
// SERVICES

service MiHome {
	// Return an empty reply
	rpc Ping (google.protobuf.Empty) returns (google.protobuf.Empty);

    // Reset the device
    rpc Reset (google.protobuf.Empty) returns (google.protobuf.Empty);

    // Send 'On' and 'Off' signals
    rpc On (SensorKey) returns (google.protobuf.Empty);
	rpc Off (SensorKey) returns (google.protobuf.Empty);

	// Return current status
	rpc Status (google.protobuf.Empty) returns (StatusReply);

	// Send a join message after a join report is received
	rpc SendJoin(SensorKey) returns (google.protobuf.Empty);

	// Queue messages
	rpc RequestDiagnostics(SensorRequest) returns (google.protobuf.Empty);
	rpc RequestIdentify(SensorRequest) returns (google.protobuf.Empty);
	rpc RequestExercise(SensorRequest) returns (google.protobuf.Empty);
	rpc RequestBatteryLevel(SensorRequest) returns (google.protobuf.Empty);
	rpc SendTargetTemperature(SensorRequestTemperature) returns (google.protobuf.Empty);
	rpc SendReportInterval(SensorRequestInterval) returns (google.protobuf.Empty);
	rpc SendValueState(SensorRequestValveState) returns (google.protobuf.Empty);
	rpc SendPowerMode(SensorRequestPowerMode) returns (google.protobuf.Empty);

    // Receive messages
    rpc StreamMessages (google.protobuf.Empty) returns (stream Message);
}

/////////////////////////////////////////////////////////////////////
// SENSOR DETAILS

message SensorKey { 
	uint32 manufacturer = 1;
	uint32 product = 2;
	uint32 sensor = 3;
}

message SensorRequest {
	bool queue_request = 1;
	SensorKey sensor = 2;
}

message SensorRequestTemperature {
	bool queue_request = 1;
	SensorKey sensor = 2;
	double temperature = 3;
}

message SensorRequestInterval {
	bool queue_request = 1;
	SensorKey sensor = 2;
	google.protobuf.Duration interval = 4;
}

message SensorRequestValveState {
	bool queue_request = 1;
	SensorKey sensor = 2;
	ValveState value_state = 5;

	enum ValveState {
		OPEN = 0;
		CLOSED = 1;
		NORMAL = 2;
	}
}

message SensorRequestPowerMode {
	bool queue_request = 1;
	SensorKey sensor = 2;
	PowerMode power_mode = 6;

	enum PowerMode {
		NONE = 0;
		LOW = 1;
	}
}

/////////////////////////////////////////////////////////////////////
// STATUS

message StatusReply {
	repeated string protocol = 1;
    float device_celcius = 2;
}

/////////////////////////////////////////////////////////////////////
// MESSAGES

message Message { 
	SensorKey                 sender = 1;
	google.protobuf.Timestamp ts = 2;
	repeated Parameter params = 3;
	bytes                     data = 4;
}

message Parameter {
	Name  name = 1;
	bool  report = 2;
	bytes data = 3;
	oneof value {
		string string_value = 4;
		uint64 uint_value = 5;
		int64  int_value = 6;
		double float_value = 7;
	}

	enum Name {
       	NONE                = 0x00;
    	ALARM               = 0x21;
		EXERCISE            = 0x23;
		VALVE_STATE         = 0x25;
		DIAGNOSTICS         = 0x26;
    	DEBUG_OUTPUT        = 0x2D;
    	IDENTIFY            = 0x3F;
    	SOURCE_SELECTOR     = 0x40;
    	WATER_DETECTOR      = 0x41;
    	GLASS_BREAKAGE      = 0x42;
    	CLOSURES            = 0x43;
    	DOOR_BELL           = 0x44;
    	ENERGY              = 0x45;
    	FALL_SENSOR         = 0x46;
    	GAS_VOLUME          = 0x47;
    	AIR_PRESSURE        = 0x48;
    	ILLUMINANCE         = 0x49;
    	LEVEL               = 0x4C;
    	RAINFALL            = 0x4D;
		CLICK               = 0x4F;
    	APPARENT_POWER      = 0x50;
    	POWER_FACTOR        = 0x51;
    	REPORT_PERIOD       = 0x52;
    	SMOKE_DETECTOR      = 0x53;
    	TIME_AND_DATE       = 0x54;
    	WATER_VOLUME        = 0x57;
    	WIND_SPEED          = 0x58;
    	GAS_PRESSURE        = 0x61;
    	BATTERY_LEVEL       = 0x62;
    	CO_DETECTOR         = 0x63;
    	DOOR_SENSOR         = 0x64;
    	EMERGENCY           = 0x65;
    	FREQUENCY           = 0x66;
    	GAS_FLOW_RATE       = 0x67;
    	RELATIVE_HUMIDITY   = 0x68;
    	CURRENT             = 0x69;
    	JOIN                = 0x6A;
    	RF_QUALITY          = 0x6B;
    	LIGHT_LEVEL         = 0x6C;
    	MOTION_DETECTOR     = 0x6D;
    	OCCUPANCY           = 0x6F;
    	REAL_POWER          = 0x70;
    	REACTIVE_POWER      = 0x71;
    	ROTATION_SPEED      = 0x72;
    	SWITCH_STATE        = 0x73;
    	TEMPERATURE         = 0x74;
    	VOLTAGE             = 0x76;
	    WATER_FLOW_RATE     = 0x77;
    	WATER_PRESSURE      = 0x78;
    	THREEPHASE_POWER1   = 0x79;
    	THREEPHASE_POWER2   = 0x7A;
    	THREEPHASE_POWER3   = 0x7B;
    	THREEPHASE_POWER    = 0x7C;
    }
}
